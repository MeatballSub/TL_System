USE_LR_PARSER

WFC_START

(* ======================================================================================================= *)
<WFC_START>                 ::= <BLOCK>
                              | <EPSILON>.

<EPSILON>                   ::= .

<BLOCK>                     ::= "{" <BLOCK_STATEMENTS> "}"
                              | "{" <EPSILON> "}".

<BLOCK_STATEMENTS>          ::= <BLOCK_STATEMENT>
                              | <BLOCK_STATEMENTS><BLOCK_STATEMENT>.

<BLOCK_STATEMENT>           ::= <DECLARATION_STMT>
                              | <STATEMENT>.

<DECLARATION_STMT>          ::= <DECLARATION> ";".

<DECLARATION>               ::= <TYPE> id
                              | <TYPE> id "=" <EXPRESSION>.

<TYPE>                      ::= "int"
                              | "bool".

<STATEMENT>                 ::= <IF_THEN_ELSE>
                              | <WHILE_LOOP>
                              | <FOR_LOOP>
                              | <EXPRESSION_STMT>
                              | <BLOCK>
                              | <PRINT_STATEMENT>.

<EXPRESSION>                ::= <ASSIGNMENT_EXPR>.

<ASSIGNMENT_EXPR>           ::= <CONDITIONAL_OR_EXPR>
                              | <ASSIGNMENT>.

<ASSIGNMENT>                ::= id "=" <CONDITIONAL_OR_EXPR>.

<CONDITIONAL_OR_EXPR>       ::= <CONDITIONAL_AND_EXPR>
                              | <CONDITIONAL_OR_EXPR> "or" <CONDITIONAL_AND_EXPR>.

<CONDITIONAL_AND_EXPR>      ::= <EQUALITY_EXPR>
                              | <CONDITIONAL_AND_EXPR> "and" <EQUALITY_EXPR>.

<EQUALITY_EXPR>             ::= <RELATIONAL_EXPR>
                              | <EQUALITY_EXPR> "==" <RELATIONAL_EXPR>
                              | <EQUALITY_EXPR> "!=" <RELATIONAL_EXPR>.

<RELATIONAL_EXPR>           ::= <ADDITIVE_EXPR>
                              | <RELATIONAL_EXPR> "<" <ADDITIVE_EXPR>
                              | <RELATIONAL_EXPR> ">" <ADDITIVE_EXPR>
                              | <RELATIONAL_EXPR> "<=" <ADDITIVE_EXPR>
                              | <RELATIONAL_EXPR> ">=" <ADDITIVE_EXPR>.

<ADDITIVE_EXPR>             ::= <MULTIPLICATIVE_EXPR>
                              | <ADDITIVE_EXPR> "+" <MULTIPLICATIVE_EXPR>
                              | <ADDITIVE_EXPR> "-" <MULTIPLICATIVE_EXPR>.

<MULTIPLICATIVE_EXPR>       ::= <UNARY_EXPR>
                              | <MULTIPLICATIVE_EXPR> "*" <UNARY_EXPR>
                              | <MULTIPLICATIVE_EXPR> "div" <UNARY_EXPR>
                              | <MULTIPLICATIVE_EXPR> "mod" <UNARY_EXPR>.

<UNARY_EXPR>                ::= <PREINCREMENT_EXPR>
                              | <PREDECREMENT_EXPR>
                              | "+" <UNARY_EXPR>
                              | "-" <UNARY_EXPR>
                              | <UNARY_EXPR_NOT_PLUS_MINUS>.

<UNARY_EXPR_NOT_PLUS_MINUS> ::= <POSTFIX_EXPR>
                              | "not" <UNARY_EXPR>.

<PREINCREMENT_EXPR>         ::= "++" <UNARY_EXPR>.

<PREDECREMENT_EXPR>         ::= "--" <UNARY_EXPR>.

<POSTFIX_EXPR>              ::= <EXPONENTIAL_EXPR>
                              | <POSTINCREMENT_EXPR>
                              | <POSTDECREMENT_EXPR>.

<PRIMARY>                   ::= <LITERAL>
                              | "(" <EXPRESSION> ")".

<LITERAL>                   ::= integer
                              | boolean.

<POSTINCREMENT_EXPR>        ::= <POSTFIX_EXPR> "++".

<POSTDECREMENT_EXPR>        ::= <POSTFIX_EXPR> "--".

<EXPONENTIAL_EXPR>          ::= <ABS_EXPR>
                              | <EXPONENTIAL_EXPR> "^" <ABS_EXPR>.

<ABS_EXPR>                  ::= id
                              | <PRIMARY>
                              | "|" <ADDITIVE_EXPR> "|".

<IF_THEN_ELSE>              ::= "if" "(" <EXPRESSION> ")" <BLOCK>
                              | "if" "(" <EXPRESSION> ")" <BLOCK> "else" <BLOCK>.

<WHILE_LOOP>                ::= "while" "(" <EXPRESSION> ")" <BLOCK> .

<FOR_LOOP>                  ::= "for" "(" <FOR_INIT> ";" <EXPRESSION> ";" <STATEMENT_EXPR> ")" <BLOCK>.

<PRINT_STATEMENT>           ::= "print" "(" <CONDITIONAL_OR_EXPR> ")" ";".

<FOR_INIT>                  ::= <STATEMENT_EXPR>
                              | <DECLARATION>.

<EXPRESSION_STMT>           ::= <STATEMENT_EXPR> ";".

<STATEMENT_EXPR>            ::= <ASSIGNMENT>
                              | <PREINCREMENT_EXPR>
                              | <PREDECREMENT_EXPR>
                              | <POSTFIX_EXPR>.