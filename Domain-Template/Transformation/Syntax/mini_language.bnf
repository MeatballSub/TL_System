USE_LR_PARSER

WFC_START

(* ======================================================================================================= *)
<WFC_START>             ::= <STATEMENT_LIST>.

<STATEMENT_LIST>        ::= <EPSILON>
                          | <STATEMENT><STATEMENT_LIST>.

<EPSILON>               ::= .

<STATEMENT>             ::= <DECLARATION_STATEMENT> ";"
                          | <ASSIGNMENT_STATEMENT> ";"
                          | <BLOCK>
                          | <CONDITIONAL_STATEMENT>
                          | <WHILE_LOOP>
                          | <FOR_LOOP>
                          | <PRINT_STATEMENT> ";".

<DECLARATION_STATEMENT> ::= int identifier
                          | bool identifier
                          | int identifier "=" <EXPRESSION>
                          | bool identifier "=" <EXPRESSION>.

<ASSIGNMENT_STATEMENT>  ::= identifier "=" <EXPRESSION>
                          | <PREFIX_EXPRESSION>
                          | <POSTFIX_EXPRESSION>.

<BLOCK>                 ::= "{" STATEMENT_LIST "}".

<PREFIX_EXPRESSION>     ::= "++" identifier
                          | "--" identifier.

<POSTFIX_EXPRESSION>    ::= identifier "++"
                          | identifier "--".

<PRINT_STATEMENT>       ::= "print" "(" <EXPRESSION> ")".

<CONDITIONAL_STATEMENT> ::= "if" "(" <EXPRESSION> ")" <BLOCK>
                          | "if" "(" <EXPRESSION> ")" <BLOCK> "else" <BLOCK>.

<FOR_LOOP>              ::= "for" "(" <FOR_INIT> ";" <EXPRESSION> ";" <ASSIGNMENT_STATEMENT> ")" <BLOCK>.

<FOR_INIT>              ::= <ASSIGNMENT_STATEMENT>
                          | <DECLARATION_STATEMENT>.

<WHILE_LOOP>            ::= "while" "(" <EXPRESSION> ")" <BLOCK>.

<EXPRESSION>            ::= <EXPRESSION> "or" <DISJUNCTION>
                          | <DISJUNCTION>.

<DISJUNCTION>           ::= <DISJUNCTION> "and" <EQUALITY>
                          | <EQUALITY>.

<EQUALITY>              ::= <EQUALITY> "==" <RELATIONAL>
                          | <EQUALITY> "!=" <RELATIONAL>
                          | <RELATIONAL>.

<RELATIONAL>            ::= <RELATIONAL> "<" <ADDITIVE>
                          | <RELATIONAL> "<=" <ADDITIVE>
                          | <RELATIONAL> ">" <ADDITIVE>
                          | <RELATIONAL> ">=" <ADDITIVE>
                          | <ADDITIVE>.

<ADDITIVE>              ::= <ADDITIVE> "+" <MULTIPLICATIVE>
                          | <ADDITIVE> "-" <MULTIPLICATIVE>
                          | <MULTIPLICATIVE>.

<MULTIPLICATIVE>        ::= <MULTIPLICATIVE> "*" <EXPONENTIAL>
                          | <MULTIPLICATIVE> "div" <EXPONENTIAL>
                          | <MULTIPLICATIVE> "mod" <EXPONENTIAL>
                          | <EXPONENTIAL>.

<EXPONENTIAL>           ::= <UNARY> "^" <EXPONENTIAL>
                          | <UNARY>.

<UNARY>                 ::= "-" <PRIMARY>
                          | "not" <PRIMARY>
                          | <PRIMARY>.

<PRIMARY>               ::= identifier
                          | integer
                          | boolean
                          | "(" <EXPRESSION> ")"
                          | "|" <EXPRESSION> "|"
                          | <PREFIX_EXPRESSION>
                          | <POSTFIX_EXPRESSION>. 