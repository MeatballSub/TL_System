(*#line 31.10 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult	= SHELL of string * string * {line: word, column: word};
val error 			= fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof 			= fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
		fun split(x, []   ) =  raise General.Fail("an_error")
		  | split(x, y::ys) = if x=y then ys else split(x,ys);
													
		fun splitFirst(symbol,[])    = 	[] (* symbol was not in the input list *)
		  | splitFirst(symbol,x::xs) = 	if x = symbol 
						then (* found split point *)
							[]
						else (* keep looking      *)
							x::splitFirst(symbol,xs);
																		
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
	
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\077\078\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\077\075\003\003\003\003\003\003\074\073\072\070\003\068\003\066\
\\064\064\064\064\064\064\064\064\064\064\003\063\058\056\055\003\
\\003\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\052\003\003\051\003\
\\003\048\041\006\038\034\031\006\006\026\006\006\006\023\020\018\
\\013\006\006\006\006\006\006\008\006\006\006\005\003\004\003\003\
\\003"
),
 (6, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\009\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\010\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\011\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\012\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\014\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\015\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\016\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\017\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\019\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\021\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\022\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\024\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\025\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\030\007\029\007\007\007\007\007\007\007\027\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\028\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\032\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\033\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\035\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\036\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\037\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\039\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\040\007\007\007\007\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\042\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\043\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\044\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\045\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\046\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\047\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\049\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\050\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\
\\000\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\059\059\059\059\059\059\059\059\059\059\000\000\000\000\060\000\
\\000\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\000\000\000\000\059\
\\000\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\062\062\062\062\062\062\062\062\062\062\000\000\000\000\000\000\
\\000\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\000\000\000\000\062\
\\000\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\065\065\065\065\065\065\065\065\065\065\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (67, 
"\067\067\067\067\067\067\067\067\067\067\000\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\078\078\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 120)], trans = 0},
{fin = [(N 90),(N 120)], trans = 0},
{fin = [(N 88),(N 120)], trans = 0},
{fin = [(N 12),(N 120)], trans = 6},
{fin = [(N 12)], trans = 6},
{fin = [(N 12),(N 120)], trans = 8},
{fin = [(N 12)], trans = 9},
{fin = [(N 12)], trans = 10},
{fin = [(N 12)], trans = 11},
{fin = [(N 12),(N 104)], trans = 6},
{fin = [(N 12),(N 120)], trans = 13},
{fin = [(N 12)], trans = 14},
{fin = [(N 12)], trans = 15},
{fin = [(N 12)], trans = 16},
{fin = [(N 12),(N 114)], trans = 6},
{fin = [(N 12),(N 120)], trans = 18},
{fin = [(N 12),(N 50)], trans = 6},
{fin = [(N 12),(N 120)], trans = 20},
{fin = [(N 12)], trans = 21},
{fin = [(N 12),(N 54)], trans = 6},
{fin = [(N 12),(N 120)], trans = 23},
{fin = [(N 12)], trans = 24},
{fin = [(N 12),(N 84)], trans = 6},
{fin = [(N 12),(N 120)], trans = 26},
{fin = [(N 12)], trans = 27},
{fin = [(N 12),(N 39)], trans = 6},
{fin = [(N 12),(N 93)], trans = 6},
{fin = [(N 12),(N 27)], trans = 6},
{fin = [(N 12),(N 120)], trans = 31},
{fin = [(N 12)], trans = 32},
{fin = [(N 12),(N 108)], trans = 6},
{fin = [(N 12),(N 120)], trans = 34},
{fin = [(N 12)], trans = 35},
{fin = [(N 12)], trans = 36},
{fin = [(N 12),(N 98)], trans = 6},
{fin = [(N 12),(N 120)], trans = 38},
{fin = [(N 12)], trans = 39},
{fin = [(N 12),(N 80)], trans = 6},
{fin = [(N 12),(N 120)], trans = 41},
{fin = [(N 12)], trans = 42},
{fin = [(N 12)], trans = 43},
{fin = [(N 12)], trans = 44},
{fin = [(N 12)], trans = 45},
{fin = [(N 12)], trans = 46},
{fin = [(N 12),(N 35)], trans = 6},
{fin = [(N 12),(N 120)], trans = 48},
{fin = [(N 12)], trans = 49},
{fin = [(N 12),(N 47)], trans = 6},
{fin = [(N 86),(N 120)], trans = 0},
{fin = [(N 120)], trans = 52},
{fin = [], trans = 53},
{fin = [(N 24)], trans = 0},
{fin = [(N 58),(N 120)], trans = 0},
{fin = [(N 43),(N 120)], trans = 56},
{fin = [(N 61)], trans = 0},
{fin = [(N 56),(N 120)], trans = 58},
{fin = [], trans = 59},
{fin = [], trans = 60},
{fin = [], trans = 61},
{fin = [(N 20)], trans = 61},
{fin = [(N 41),(N 120)], trans = 0},
{fin = [(N 9),(N 120)], trans = 64},
{fin = [(N 9)], trans = 64},
{fin = [(N 120)], trans = 66},
{fin = [(N 6)], trans = 67},
{fin = [(N 72),(N 120)], trans = 68},
{fin = [(N 67)], trans = 0},
{fin = [(N 74),(N 120)], trans = 70},
{fin = [(N 70)], trans = 0},
{fin = [(N 76),(N 120)], trans = 0},
{fin = [(N 118),(N 120)], trans = 0},
{fin = [(N 116),(N 120)], trans = 0},
{fin = [(N 120)], trans = 75},
{fin = [(N 64)], trans = 0},
{fin = [(N 2),(N 120)], trans = 77},
{fin = [(N 2)], trans = 77}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  104 => let val yytext=yymktext() in (*#line 84.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 692.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 108 => let val yytext=yymktext() in (*#line 85.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 694.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 114 => let val yytext=yymktext() in (*#line 86.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 696.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 116 => let val yytext=yymktext() in (*#line 87.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 698.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 118 => let val yytext=yymktext() in (*#line 88.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 700.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 12 => let val yytext=yymktext() in (*#line 53.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("id"        , yytext,     getNextTokenPos(yytext))    (*#line 702.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 120 => let val yytext=yymktext() in (*#line 90.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 704.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 2 => let val yytext=yymktext() in (*#line 49.18 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 706.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 20 => let val yytext=yymktext() in (*#line 57.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 708.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 24 => let val yytext=yymktext() in (*#line 58.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("" , yytext, getNextTokenPos(yytext))    (*#line 710.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 27 => let val yytext=yymktext() in (*#line 60.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("id" , yytext, getNextTokenPos(yytext))    (*#line 712.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 35 => let val yytext=yymktext() in (*#line 61.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 714.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 39 => let val yytext=yymktext() in (*#line 62.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 716.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 41 => let val yytext=yymktext() in (*#line 63.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 718.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 43 => let val yytext=yymktext() in (*#line 64.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 720.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 47 => let val yytext=yymktext() in (*#line 65.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 722.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 50 => let val yytext=yymktext() in (*#line 66.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 724.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 54 => let val yytext=yymktext() in (*#line 67.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 726.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 56 => let val yytext=yymktext() in (*#line 68.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 728.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 58 => let val yytext=yymktext() in (*#line 69.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 730.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 6 => let val yytext=yymktext() in (*#line 50.18 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 732.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 61 => let val yytext=yymktext() in (*#line 70.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 734.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 64 => let val yytext=yymktext() in (*#line 71.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 736.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 72.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 738.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 70 => let val yytext=yymktext() in (*#line 73.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 740.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 72 => let val yytext=yymktext() in (*#line 74.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 742.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 74 => let val yytext=yymktext() in (*#line 75.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 744.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 76 => let val yytext=yymktext() in (*#line 76.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 746.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 80 => let val yytext=yymktext() in (*#line 77.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 748.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 84 => let val yytext=yymktext() in (*#line 78.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 750.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 86 => let val yytext=yymktext() in (*#line 79.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 752.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 88 => let val yytext=yymktext() in (*#line 80.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 754.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 9 => let val yytext=yymktext() in (*#line 52.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("integer"   , yytext,     getNextTokenPos(yytext))    (*#line 756.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 90 => let val yytext=yymktext() in (*#line 81.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 758.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 93 => let val yytext=yymktext() in (*#line 82.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 760.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 98 => let val yytext=yymktext() in (*#line 83.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 762.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
