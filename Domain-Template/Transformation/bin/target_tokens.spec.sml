(*#line 31.10 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult	= SHELL of string * string * {line: word, column: word};
val error 			= fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof 			= fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
		fun split(x, []   ) =  raise General.Fail("an_error")
		  | split(x, y::ys) = if x=y then ys else split(x,ys);
													
		fun splitFirst(symbol,[])    = 	[] (* symbol was not in the input list *)
		  | splitFirst(symbol,x::xs) = 	if x = symbol 
						then (* found split point *)
							[]
						else (* keep looking      *)
							x::splitFirst(symbol,xs);
																		
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
	
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\084\085\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\084\082\003\003\003\003\003\003\081\080\079\077\003\075\003\073\
\\072\070\070\070\070\070\070\070\070\070\003\069\063\061\059\003\
\\003\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\056\003\003\055\003\
\\003\052\048\007\045\041\035\007\007\031\007\007\007\028\025\023\
\\018\007\007\007\014\007\007\009\007\007\007\006\005\004\003\003\
\\003"
),
 (7, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\010\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\011\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\012\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\013\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\015\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\016\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\017\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\019\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\020\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\021\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\022\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\024\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\026\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\027\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\029\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\030\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\034\008\008\008\008\008\008\008\032\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\033\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\038\008\008\008\008\008\008\008\008\008\008\008\008\008\036\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\037\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\039\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\040\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\042\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\043\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\044\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\046\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\047\008\008\008\008\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\049\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\050\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\051\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\053\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\054\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\064\064\064\064\064\064\064\064\064\064\000\000\000\000\065\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\064\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\067\067\067\067\067\067\067\067\067\067\000\000\000\000\000\000\
\\000\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\000\000\000\000\067\
\\000\067\067\067\067\067\067\067\067\067\067\067\067\067\067\067\
\\067\067\067\067\067\067\067\067\067\067\067\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\071\071\071\071\071\071\071\071\071\071\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (73, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\074\074\074\074\074\074\074\074\074\074\000\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (82, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (84, 
"\000\000\000\000\000\000\000\000\000\085\085\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 133)], trans = 0},
{fin = [(N 67),(N 133)], trans = 0},
{fin = [(N 14),(N 133)], trans = 0},
{fin = [(N 65),(N 133)], trans = 0},
{fin = [(N 119),(N 133)], trans = 7},
{fin = [(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 9},
{fin = [(N 119)], trans = 10},
{fin = [(N 119)], trans = 11},
{fin = [(N 119)], trans = 12},
{fin = [(N 81),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 14},
{fin = [(N 119)], trans = 15},
{fin = [(N 119)], trans = 16},
{fin = [(N 116),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 18},
{fin = [(N 119)], trans = 19},
{fin = [(N 119)], trans = 20},
{fin = [(N 119)], trans = 21},
{fin = [(N 91),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 23},
{fin = [(N 21),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 25},
{fin = [(N 119)], trans = 26},
{fin = [(N 25),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 28},
{fin = [(N 119)], trans = 29},
{fin = [(N 63),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 31},
{fin = [(N 119)], trans = 32},
{fin = [(N 8),(N 119)], trans = 7},
{fin = [(N 70),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 35},
{fin = [(N 119)], trans = 36},
{fin = [(N 85),(N 119)], trans = 7},
{fin = [(N 119)], trans = 38},
{fin = [(N 119)], trans = 39},
{fin = [(N 119)], trans = 16},
{fin = [(N 119),(N 133)], trans = 41},
{fin = [(N 119)], trans = 42},
{fin = [(N 119)], trans = 43},
{fin = [(N 75),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 45},
{fin = [(N 119)], trans = 46},
{fin = [(N 59),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 48},
{fin = [(N 119)], trans = 49},
{fin = [(N 119)], trans = 50},
{fin = [(N 4),(N 119)], trans = 7},
{fin = [(N 119),(N 133)], trans = 52},
{fin = [(N 119)], trans = 53},
{fin = [(N 18),(N 119)], trans = 7},
{fin = [(N 55),(N 133)], trans = 0},
{fin = [(N 133)], trans = 56},
{fin = [], trans = 57},
{fin = [(N 131)], trans = 0},
{fin = [(N 29),(N 133)], trans = 59},
{fin = [(N 35)], trans = 0},
{fin = [(N 12),(N 133)], trans = 61},
{fin = [(N 38)], trans = 0},
{fin = [(N 27),(N 133)], trans = 63},
{fin = [], trans = 64},
{fin = [], trans = 65},
{fin = [], trans = 66},
{fin = [(N 127)], trans = 66},
{fin = [(N 32)], trans = 0},
{fin = [(N 10),(N 133)], trans = 0},
{fin = [(N 106),(N 133)], trans = 70},
{fin = [(N 106)], trans = 70},
{fin = [(N 106),(N 133)], trans = 0},
{fin = [(N 133)], trans = 73},
{fin = [(N 102)], trans = 74},
{fin = [(N 49),(N 133)], trans = 75},
{fin = [(N 44)], trans = 0},
{fin = [(N 51),(N 133)], trans = 77},
{fin = [(N 47)], trans = 0},
{fin = [(N 53),(N 133)], trans = 0},
{fin = [(N 95),(N 133)], trans = 0},
{fin = [(N 93),(N 133)], trans = 0},
{fin = [(N 133)], trans = 82},
{fin = [(N 41)], trans = 0},
{fin = [(N 98),(N 133)], trans = 84},
{fin = [(N 98)], trans = 84}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  10 => let val yytext=yymktext() in (*#line 52.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 732.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 102 => let val yytext=yymktext() in (*#line 83.18 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 734.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 106 => let val yytext=yymktext() in (*#line 85.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("integer"   , yytext,     getNextTokenPos(yytext))    (*#line 736.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 116 => let val yytext=yymktext() in (*#line 86.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("boolean"   , yytext,     getNextTokenPos(yytext))(*#line 738.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 119 => let val yytext=yymktext() in (*#line 87.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("id"        , yytext,     getNextTokenPos(yytext))    (*#line 740.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 12 => let val yytext=yymktext() in (*#line 53.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 742.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 127 => let val yytext=yymktext() in (*#line 91.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 744.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 131 => let val yytext=yymktext() in (*#line 92.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("" , yytext, getNextTokenPos(yytext))    (*#line 746.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 133 => let val yytext=yymktext() in (*#line 94.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 748.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 14 => let val yytext=yymktext() in (*#line 54.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 750.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 18 => let val yytext=yymktext() in (*#line 55.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 752.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 21 => let val yytext=yymktext() in (*#line 56.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 754.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 25 => let val yytext=yymktext() in (*#line 57.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 756.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 27 => let val yytext=yymktext() in (*#line 58.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 758.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 29 => let val yytext=yymktext() in (*#line 59.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 760.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 32 => let val yytext=yymktext() in (*#line 60.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 762.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 35 => let val yytext=yymktext() in (*#line 61.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 764.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 38 => let val yytext=yymktext() in (*#line 62.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 766.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 4 => let val yytext=yymktext() in (*#line 50.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 768.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 41 => let val yytext=yymktext() in (*#line 63.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 770.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 44 => let val yytext=yymktext() in (*#line 64.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 772.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 47 => let val yytext=yymktext() in (*#line 65.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 774.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 49 => let val yytext=yymktext() in (*#line 66.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 776.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 51 => let val yytext=yymktext() in (*#line 67.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 778.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 53 => let val yytext=yymktext() in (*#line 68.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 780.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 55 => let val yytext=yymktext() in (*#line 69.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 782.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 59 => let val yytext=yymktext() in (*#line 70.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 784.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 63 => let val yytext=yymktext() in (*#line 71.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 786.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 65 => let val yytext=yymktext() in (*#line 72.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 788.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 73.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 790.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 70 => let val yytext=yymktext() in (*#line 74.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 792.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 75 => let val yytext=yymktext() in (*#line 75.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 794.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 8 => let val yytext=yymktext() in (*#line 51.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 796.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 81 => let val yytext=yymktext() in (*#line 76.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 798.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 85 => let val yytext=yymktext() in (*#line 77.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 800.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 91 => let val yytext=yymktext() in (*#line 78.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 802.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 93 => let val yytext=yymktext() in (*#line 79.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 804.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 95 => let val yytext=yymktext() in (*#line 80.35 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))    (*#line 806.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 98 => let val yytext=yymktext() in (*#line 82.18 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 808.1 "C:\Users\Kevin\Desktop\TL_System\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
